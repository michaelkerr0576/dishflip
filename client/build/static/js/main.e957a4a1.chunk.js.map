{"version":3,"sources":["assets/Dishflip-Logo-Type-White-1.png","components/Navbar.js","components/MenuItem.js","components/MenuSection.js","components/Menu.js","actions/menuActions.js","actions/actionTypes.js","App.js","serviceWorker.js","reducers/menuReducer.js","reducers/index.js","store.js","index.js"],"names":["module","exports","AppNavbar","props","useState","collapsed","setCollapsed","Navbar","color","dark","NavbarBrand","href","className","src","logo","width","height","alt","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","NavLink","MenuItem","menuItem","this","Card","CardImg","top","ImageUrl","ImageName","CardBody","console","log","CardTitle","Row","Col","xs","Name","style","position","ActualPrice","CardText","Description","Badge","pill","Component","MenuSection","state","collapse","onToggle","setState","accordianIcon","menuSection","CardHeader","toUpperCase","in","timeout","CardColumns","MenuItems","length","map","index","key","Menu","getMenu","menu","Container","fluid","mapDispatchToProps","dispatch","fetch","then","res","json","type","payload","catch","error","connect","App","Boolean","window","location","hostname","match","initialState","loading","combineReducers","action","MenuSections","middleware","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","Index","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e957a4a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Dishflip-Logo-Type-White-1.8a725c1a.png\";","import React, { useState } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from \"reactstrap\";\r\nimport logo from \"../assets/Dishflip-Logo-Type-White-1.png\";\r\n\r\nconst AppNavbar = (props) => {\r\n  const [collapsed, setCollapsed] = useState(true);\r\n\r\n  const toggleNavbar = () => setCollapsed(!collapsed);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"dark\" dark>\r\n        <NavbarBrand href=\"/\" className=\"mr-auto\">\r\n          <img src={logo} width=\"130\" height=\"auto\" alt=\"dishflip\"></img>\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={toggleNavbar} />\r\n        <Collapse isOpen={!collapsed} navbar>\r\n          <Nav navbar>\r\n            <NavItem>\r\n              <NavLink\r\n                href=\"https://github.com/michaelkerr0576/dishflip\"\r\n                className=\"border-top mt-2\"\r\n              >\r\n                GitHub Code\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardImg,\r\n  CardTitle,\r\n  CardText,\r\n  Badge,\r\n} from \"reactstrap\";\r\n\r\nclass MenuItem extends Component {\r\n  render() {\r\n    const { menuItem } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <Card className=\"border-0 shadow-sm mb-3\">\r\n          <CardImg\r\n            top\r\n            width=\"100%\"\r\n            src={menuItem.ImageUrl}\r\n            alt={menuItem.ImageName}\r\n          />\r\n          <CardBody className=\"border-bottom px-2\">\r\n            {console.log(menuItem)}\r\n            <CardTitle>\r\n              <Row>\r\n                <Col className=\"text-left mr-auto\" xs=\"auto\">\r\n                  <h5>{menuItem.Name}</h5>\r\n                </Col>\r\n                <Col className=\"text-right\" xs=\"auto\">\r\n                  <h5>\r\n                    <small\r\n                      style={{ position: \"relative\", top: \"-4px\" }}\r\n                      className=\"font-weight-light mr-1\"\r\n                    >\r\n                      from\r\n                    </small>\r\n                    â‚¬{menuItem.ActualPrice}\r\n                  </h5>\r\n                </Col>\r\n              </Row>\r\n            </CardTitle>\r\n            <CardText>{menuItem.Description}</CardText>\r\n            <hr className=\"my-1 mx-n2\"></hr>\r\n            <CardText className=\"font-weight-light\">Additions: <Badge color=\"light\" pill>Light</Badge></CardText>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MenuItem;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardHeader,\r\n  CardColumns,\r\n  Collapse,\r\n} from \"reactstrap\";\r\nimport { Transition } from \"react-transition-group\";\r\n\r\nimport MenuItem from \"./MenuItem\";\r\n\r\nclass MenuSection extends Component {\r\n  state = {\r\n    collapse: false,\r\n  };\r\n\r\n  onToggle = () => {\r\n    this.setState({\r\n      collapse: !this.state.collapse,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { menuSection } = this.props;\r\n    const { collapse } = this.state;\r\n\r\n    let accordianIcon;\r\n    if (collapse) {\r\n      accordianIcon = <i className=\"fas fa-chevron-up\"></i>;\r\n    } else {\r\n      accordianIcon = <i className=\"fas fa-chevron-down\"></i>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Card className=\"shadow-sm my-3\">\r\n          <CardHeader\r\n            onClick={this.onToggle}\r\n            className=\"c-textUnderline c-pointer py-3\"\r\n          >\r\n            <Row>\r\n              <Col xs=\"auto\" className=\"text-left mr-auto\">\r\n                <h4>{menuSection.Name.toUpperCase()}</h4>\r\n              </Col>\r\n              <Col xs=\"auto\" className=\"text-right\">\r\n                {accordianIcon}\r\n              </Col>\r\n            </Row>\r\n          </CardHeader>\r\n          {/* Card Body - accordian with transition */}\r\n          <Transition in={collapse} timeout={1000}>\r\n            <Collapse isOpen={collapse}>\r\n              <CardColumns className=\"m-2\">\r\n                {/* MENU ITEM COMPONENT*/}\r\n                {menuSection.MenuItems.length &&\r\n                  menuSection.MenuItems.map((menuItem, index) => (\r\n                    <MenuItem key={index} menuItem={menuItem} />\r\n                  ))}\r\n              </CardColumns>\r\n            </Collapse>\r\n          </Transition>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MenuSection;\r\n","import React, { Component } from \"react\";\r\nimport { Container } from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { getMenu } from \"../actions/menuActions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport MenuSection from \"./MenuSection\";\r\n\r\nclass Menu extends Component {\r\n  //Runs when the component mounts\r\n  componentDidMount() {\r\n    this.props.getMenu();\r\n  }\r\n\r\n  render() {\r\n    const { menu } = this.props.menu;\r\n\r\n    return (\r\n      <div>\r\n        <Container fluid=\"xl\">\r\n          {/* MENU SECTION COMPONENT*/}\r\n          {menu.length &&\r\n            menu.map((menuSection, index) => (\r\n              <MenuSection key={index} menuSection={menuSection} />\r\n            ))}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMenu.propTypes = {\r\n  getMenu: PropTypes.func.isRequired,\r\n  menu: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapSateToProps = (state) => ({\r\n  menu: state.menu,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getMenu,\r\n};\r\n\r\nexport default connect(mapSateToProps, mapDispatchToProps)(Menu);\r\n","import { GET_MENU } from \"./actionTypes\";\r\n\r\nexport const getMenu = () => (dispatch) => {\r\n  fetch(\r\n    \"https://menus.flipdish.co/prod/16798/e6220da2-c34a-4ea2-bb51-a3e190fc5f08.json\"\r\n  )\r\n    .then((res) => res.json())\r\n    .then((res) => {\r\n      console.log(res);\r\n      dispatch({\r\n        type: GET_MENU,\r\n        payload: res,\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"ERROR fetching data\");\r\n    });\r\n};\r\n","export const GET_MENU = \"GET_MENU\";","import React, { Component } from \"react\";\n\nimport Navbar from \"./components/Navbar\";\nimport Menu from \"./components/Menu\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <Menu />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GET_MENU } from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  menu: [],\r\n  loading: false,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_MENU:\r\n      return {\r\n        ...state,\r\n        menu: action.payload.MenuSections,\r\n        loading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport menuReducer from \"./menuReducer\";\r\n\r\nexport default combineReducers({\r\n  menu: menuReducer,\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers/index\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeEnhancers(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nclass Index extends Component {\n  render() {\n    /* Share state for each component in App */\n    return (\n      <Provider store={store}>\n        <App />\n      </Provider>\n    );\n  }\n}\n\nReactDOM.render(<Index />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}