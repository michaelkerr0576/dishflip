{"version":3,"sources":["assets/Dishflip-Logo-Type-White-1.png","components/Navbar.js","components/MenuAdditionItem.js","components/MenuAddition.js","components/MenuItem.js","components/MenuSection.js","components/Menu.js","actions/menuActions.js","actions/actionTypes.js","App.js","serviceWorker.js","reducers/menuReducer.js","reducers/index.js","store.js","index.js"],"names":["module","exports","AppNavbar","props","useState","collapsed","setCollapsed","Navbar","color","dark","NavbarBrand","href","className","src","logo","width","height","alt","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","NavLink","MenuAdditionItem","onItemClick","name","alert","this","menuAdditionItem","masterOption","minPrice","Badge","pill","Name","Price","toFixed","Component","MenuAddition","menuAddition","CardText","style","fontSize","MenuItemOptionSetItems","length","concat","sort","a","b","DisplayOrder","map","index","key","IsMasterOptionSet","MinPrice","MenuItem","isAdditions","menuItem","MenuItemOptionSets","CardFooter","Card","CardImg","top","ImageUrl","ImageName","CardBody","CardTitle","Row","Col","xs","position","ActualPrice","Description","MenuSection","state","collapse","onToggle","setState","accordianIcon","menuSection","CardHeader","toUpperCase","in","timeout","CardColumns","MenuItems","Menu","getMenu","menu","Container","fluid","mapDispatchToProps","dispatch","fetch","then","res","json","console","log","type","payload","catch","error","connect","App","Boolean","window","location","hostname","match","initialState","loading","combineReducers","action","MenuSections","middleware","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","Index","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.25accb08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Dishflip-Logo-Type-White-1.8a725c1a.png\";","import React, { useState } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from \"reactstrap\";\r\nimport logo from \"../assets/Dishflip-Logo-Type-White-1.png\";\r\n\r\nconst AppNavbar = (props) => {\r\n  const [collapsed, setCollapsed] = useState(true);\r\n\r\n  const toggleNavbar = () => setCollapsed(!collapsed);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"dark\" dark>\r\n        <NavbarBrand href=\"/\" className=\"mr-auto\">\r\n          <img src={logo} width=\"130\" height=\"auto\" alt=\"dishflip\"></img>\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={toggleNavbar} />\r\n        <Collapse isOpen={!collapsed} navbar>\r\n          <Nav navbar>\r\n            <NavItem>\r\n              <NavLink\r\n                href=\"https://github.com/michaelkerr0576/dishflip\"\r\n                className=\"border-top mt-2\"\r\n              >\r\n                GitHub Code\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React, { Component } from \"react\";\r\nimport { Badge } from \"reactstrap\";\r\n\r\nclass MenuAdditionItem extends Component {\r\n  onItemClick = (name) => {\r\n    alert(\"Clicked \" + name);\r\n  };\r\n\r\n  render() {\r\n    const { menuAdditionItem, masterOption, minPrice } = this.props;\r\n\r\n    return (\r\n      <Badge\r\n        className=\"c-pointer text-dark font-weight-normal ml-1\"\r\n        color=\"light\"\r\n        pill\r\n        onClick={() => {\r\n          this.onItemClick(menuAdditionItem.Name);\r\n        }}\r\n      >\r\n        <i className=\"fas fa-plus mr-1\"></i>\r\n        {menuAdditionItem.Name}\r\n        <strong className=\"ml-1\">\r\n          â‚¬\r\n          {masterOption\r\n            ? (menuAdditionItem.Price - minPrice).toFixed(2)\r\n            : menuAdditionItem.Price.toFixed(2)}\r\n        </strong>\r\n      </Badge>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MenuAdditionItem;\r\n","import React, { Component } from \"react\";\r\nimport { CardText } from \"reactstrap\";\r\n\r\nimport MenuAdditionItem from \"./MenuAdditionItem\";\r\n\r\nclass MenuAddition extends Component {\r\n  render() {\r\n    const { menuAddition } = this.props;\r\n    let sortedAdditionItems = [];\r\n\r\n    return (\r\n      <div>\r\n        <CardText className=\"font-weight-light\" style={{ fontSize: \"1.2rem\" }}>\r\n          {menuAddition.Name ? menuAddition.Name + \":\" : null}\r\n          {/* MENU Addition Item COMPONENT - copy data into new array and sort it by DisplayOrder */}\r\n          {menuAddition.MenuItemOptionSetItems.length &&\r\n            (sortedAdditionItems = []\r\n              .concat(menuAddition.MenuItemOptionSetItems)\r\n              .sort((a, b) => (a.DisplayOrder > b.DisplayOrder ? 1 : -1))\r\n              .map((menuAdditionItem, index) => (\r\n                <MenuAdditionItem\r\n                  key={index}\r\n                  menuAdditionItem={menuAdditionItem}\r\n                  masterOption={menuAddition.IsMasterOptionSet}\r\n                  minPrice={menuAddition.MinPrice}\r\n                />\r\n              )))}\r\n        </CardText>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MenuAddition;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardImg,\r\n  CardTitle,\r\n  CardText,\r\n  CardFooter,\r\n  Badge,\r\n} from \"reactstrap\";\r\n\r\nimport MenuAddition from \"./MenuAddition\";\r\n\r\nclass MenuItem extends Component {\r\n  render() {\r\n    const { menuItem } = this.props;\r\n    let sortedAdditions = [];\r\n\r\n    let isAdditions;\r\n    if (menuItem.MenuItemOptionSets.length) {\r\n      isAdditions = (\r\n        <CardFooter className=\"bg-white border-bottom px-2\">\r\n          <h6>Additions:</h6>\r\n          {/* MENU Addition COMPONENT - copy data into new array and sort it by DisplayOrder */}\r\n          {\r\n            (sortedAdditions = []\r\n              .concat(menuItem.MenuItemOptionSets)\r\n              .sort((a, b) => (a.DisplayOrder > b.DisplayOrder ? 1 : -1))\r\n              .map((menuAddition, index) => (\r\n                <MenuAddition key={index} menuAddition={menuAddition} />\r\n              )))\r\n          }\r\n        </CardFooter>\r\n      );\r\n    } else {\r\n      isAdditions = null;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Card className=\"border-0 shadow mb-3\">\r\n          <CardImg\r\n            top\r\n            width=\"100%\"\r\n            src={menuItem.ImageUrl}\r\n            alt={menuItem.ImageName}\r\n          />\r\n          <CardBody className=\"bg-light p-2\">\r\n            <CardTitle>\r\n              <Row>\r\n                <Col className=\"text-left mr-auto\" xs=\"auto\">\r\n                  <h4 className=\"pt-1\">\r\n                    <u>{menuItem.Name}</u>\r\n                  </h4>\r\n                </Col>\r\n                <Col className=\"text-right\" xs=\"auto\">\r\n                  <h4>\r\n                    <Badge color=\"dark\">\r\n                      <small\r\n                        style={{ position: \"relative\", top: \"-4px\" }}\r\n                        className=\"font-weight-light mr-1\"\r\n                      >\r\n                        from\r\n                      </small>\r\n                      â‚¬{menuItem.ActualPrice.toFixed(2)}\r\n                    </Badge>\r\n                  </h4>\r\n                </Col>\r\n              </Row>\r\n            </CardTitle>\r\n            <CardText>{menuItem.Description}</CardText>\r\n          </CardBody>\r\n          {isAdditions}\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MenuItem;\r\n","import React, { Component } from \"react\";\r\nimport { Row, Col, Card, CardHeader, CardColumns, Collapse } from \"reactstrap\";\r\nimport { Transition } from \"react-transition-group\";\r\n\r\nimport MenuItem from \"./MenuItem\";\r\n\r\nclass MenuSection extends Component {\r\n  state = {\r\n    collapse: false,\r\n  };\r\n\r\n  //Runs when the component mounts\r\n  componentDidMount() {\r\n    if (this.props.index === 0) {\r\n      this.setState({\r\n        collapse: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  onToggle = () => {\r\n    this.setState({\r\n      collapse: !this.state.collapse,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { menuSection } = this.props;\r\n    const { collapse } = this.state;\r\n    let sortedItems = [];\r\n\r\n    let accordianIcon;\r\n    if (collapse) {\r\n      accordianIcon = <i className=\"fas fa-chevron-up\"></i>;\r\n    } else {\r\n      accordianIcon = <i className=\"fas fa-chevron-down\"></i>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Card className=\"shadow-sm my-3\">\r\n          <CardHeader\r\n            onClick={this.onToggle}\r\n            className=\"c-textUnderline c-pointer py-3\"\r\n          >\r\n            <Row>\r\n              <Col xs=\"auto\" className=\"text-left mr-auto\">\r\n                <h4>{menuSection.Name.toUpperCase()}</h4>\r\n              </Col>\r\n              <Col xs=\"auto\" className=\"text-right\">\r\n                {accordianIcon}\r\n              </Col>\r\n            </Row>\r\n          </CardHeader>\r\n          {/* Card Columns - accordian with transition */}\r\n          <Transition in={collapse} timeout={1000}>\r\n            <Collapse isOpen={collapse}>\r\n              <CardColumns className=\"p-2 p-sm-4 \">\r\n                {/* MENU ITEM COMPONENT - copy data into new array and sort it by DisplayOrder */}\r\n                {menuSection.MenuItems.length &&\r\n                  (sortedItems = []\r\n                    .concat(menuSection.MenuItems)\r\n                    .sort((a, b) => (a.DisplayOrder > b.DisplayOrder ? 1 : -1))\r\n                    .map((menuItem, index) => (\r\n                      <MenuItem key={index} menuItem={menuItem} />\r\n                    )))}\r\n              </CardColumns>\r\n            </Collapse>\r\n          </Transition>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MenuSection;\r\n","import React, { Component } from \"react\";\r\nimport { Container } from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { getMenu } from \"../actions/menuActions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport MenuSection from \"./MenuSection\";\r\n\r\nclass Menu extends Component {\r\n  //Runs when the component mounts\r\n  componentDidMount() {\r\n    this.props.getMenu();\r\n  }\r\n\r\n  render() {\r\n    const { menu } = this.props.menu;\r\n    let sortedSections = [];\r\n\r\n    return (\r\n      <div>\r\n        <Container fluid=\"xl\">\r\n          {/* MENU SECTION COMPONENT - copy data into new array and sort it by DisplayOrder */}\r\n          {menu.length &&\r\n            (sortedSections = []\r\n              .concat(menu)\r\n              .sort((a, b) => (a.DisplayOrder > b.DisplayOrder ? 1 : -1))\r\n              .map((menuSection, index) => (\r\n                <MenuSection\r\n                  key={index}\r\n                  index={index}\r\n                  menuSection={menuSection}\r\n                />\r\n              )))}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMenu.propTypes = {\r\n  getMenu: PropTypes.func.isRequired,\r\n  menu: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapSateToProps = (state) => ({\r\n  menu: state.menu,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getMenu,\r\n};\r\n\r\nexport default connect(mapSateToProps, mapDispatchToProps)(Menu);\r\n","import { GET_MENU, MENU_LOADING } from \"./actionTypes\";\r\n\r\nexport const getMenu = () => (dispatch) => {\r\n  fetch(\r\n    \"https://menus.flipdish.co/prod/16798/e6220da2-c34a-4ea2-bb51-a3e190fc5f08.json\"\r\n  )\r\n    .then((res) => res.json())\r\n    .then((res) => {\r\n      console.log(res);\r\n      dispatch({\r\n        type: GET_MENU,\r\n        payload: res,\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"ERROR fetching data\");\r\n    });\r\n};\r\n\r\nexport const setMenuLoading = () => {\r\n  return {\r\n    type: MENU_LOADING,\r\n  };\r\n};\r\n","export const GET_MENU = \"GET_MENU\";\r\nexport const MENU_LOADING = \"MENU_LOADING\";","import React, { Component } from \"react\";\n\nimport Navbar from \"./components/Navbar\";\nimport Menu from \"./components/Menu\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <Menu />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GET_MENU, MENU_LOADING } from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  menu: [],\r\n  loading: false,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_MENU:\r\n      return {\r\n        ...state,\r\n        menu: action.payload.MenuSections,\r\n        loading: false,\r\n      };\r\n    case MENU_LOADING:\r\n      return {\r\n        ...state,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport menuReducer from \"./menuReducer\";\r\n\r\nexport default combineReducers({\r\n  menu: menuReducer,\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers/index\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeEnhancers(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nclass Index extends Component {\n  render() {\n    /* Share state for each component in App */\n    return (\n      <Provider store={store}>\n        <App />\n      </Provider>\n    );\n  }\n}\n\nReactDOM.render(<Index />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}